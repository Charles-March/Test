{"version":3,"sources":["../src/electron/option-window.ts"],"names":[],"mappings":";AAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC9C,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC;AAIxC;IAMI,YAAY,WAAwB;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,OAAO,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,GAAG;YACrC,oCAAoC;YACpC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,GAAG;YAClC,oCAAoC;YACpC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;YAC/B,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YAClC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,WAAwB;QAC/B,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;QACtD,CAAC;QAED,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC;YACtB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YAC9B,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC;YAC/C,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,GAAG;YACX,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,QAAQ,CAAC,aAAa,CAAC,gBAAgB,EAAE;YACjD,SAAS,EAAE,IAAI;YACf,WAAW,EAAE,IAAI;YACjB,IAAI,EAAE,KAAK;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,IAAI,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,SAAS,gCAAgC,CAAC,CAAC;QACnF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAEjC,CAAC;CACJ;AAtDD,oCAsDC","file":"option-window.js","sourcesContent":["const settings = require('electron-settings');\nconst electron = require('electron');\nconst { app, Menu, ipcMain } = electron;\n\nimport { Application } from './application';\n\nexport class OptionWindow {\n\n    private win: Electron.BrowserWindow;\n    private application: Application;\n    private static optionWindow: OptionWindow;\n\n    constructor(application: Application){\n        this.application = application;\n\n        ipcMain.on('validate-option', (event, arg) => {\n            //this.application.reloadSettings();\n            this.win.close();\n        });\n\n        ipcMain.on('reset-option', (event, arg) => {\n            //this.application.reloadSettings();\n            console.log('receive->reset-option');\n            settings.resetToDefaultsSync();\n            this.application.reloadSettings();\n            this.win.webContents.send('reload-settings');\n        });\n\n    }\n\n    static run(application: Application): void{\n        if(!this.optionWindow) {\n            this.optionWindow = new OptionWindow(application);\n        }\n\n        if(this.optionWindow.win){\n            this.optionWindow.win.focus();\n            return;\n        }\n\n        this.optionWindow.win = new electron.BrowserWindow({\n            width: 800,\n            height: 500,\n            resizable: false,\n            center: true,\n            parent: electron.BrowserWindow.getFocusedWindow(),\n            darkTheme: true,\n            skipTaskbar: true,\n            show: false\n        });\n\n        this.optionWindow.win.on('closed', () => {\n            this.optionWindow.application.reloadSettings();\n            this.optionWindow.win = null;\n        });\n\n        this.optionWindow.win.loadURL(`file://${__dirname}/../browser/index.html#/option`);\n        this.optionWindow.win.show();\n\n    }\n}\n"]}