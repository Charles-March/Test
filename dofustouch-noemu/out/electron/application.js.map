{"version":3,"sources":["../src/electron/application.ts"],"names":[],"mappings":"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","file":"application.js","sourcesContent":["import {ChangeLogWindow} from \"./changelog-window\";\nconst settings = require('electron-settings');\nimport {app, ipcMain} from 'electron';\nimport * as request from 'request';\n\nimport {DefaultSettings} from './default.settings';\nimport {GameWindow} from './game-window';\nimport {UpdateWindow} from './update-window';\n\nexport class Application {\n\n    public website: string = \"http://dofustouch.no-emu.com\";\n    public cmdOptions: any;\n    public devMode: boolean = false;\n    private gameWindows: GameWindow[] = [];\n    private updateWindow: UpdateWindow;\n\n\n    constructor(cmdOptions: any) {\n        // set defaults settings\n        settings.defaults(DefaultSettings);\n\n\n        // if wrong settings -> reset\n        if(!settings.getSync('buildVersion')){\n            settings.resetToDefaultsSync(); // debug\n        }\n\n        this.cmdOptions = cmdOptions;\n        this.devMode = cmdOptions.devmode;\n        this.updateWindow = new UpdateWindow(this);\n    }\n\n    private getAppVersion(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            request('https://itunes.apple.com/lookup?id=1041406978', function (error, response, body) {\n\n                if (!error && response.statusCode == 200) {\n                    let bodyParse = JSON.parse(body);\n                    resolve(bodyParse.results[0].version);\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n\n    private getBuildVersion(): Promise<string> {\n        return new Promise((resolve, reject) => {\n\n            request('https://proxyconnection.touch.dofus.com/build/script.js', (error, response, body) => {\n\n                if (!error && response.statusCode == 200) {\n                    const regex = /.*buildVersion=(\"|')([0-9]*\\.[0-9]*\\.[0-9]*)(\"|')/g;\n                    let m: RegExpExecArray;\n\n                    m = regex.exec(body.substring(1, 10000));\n                    resolve(m[2]);\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n\n\n    run(): void {\n        // get dynamic app and build version (avoid login block)\n\n        Promise.all([\n            this.getAppVersion(),\n            this.getBuildVersion(),\n        ]).then(([newAppVersion, newBuildVersion]) => {\n            settings.setSync('option.appVersion', newAppVersion);\n\n            this.updateWindow.run().then(() => {\n                this.addWindow();\n                this.updateWindow.win.close();\n\n                if(this.cmdOptions.changelog){\n                    ChangeLogWindow.run(this);\n                }\n            });\n\n            // this.addWindow();\n\n            ipcMain.on('load-config', (event, arg) => {\n\n                let appPath = app.getAppPath();\n\n                if (this.cmdOptions.devmode) {\n                    appPath = __dirname + '/../../';\n                }\n\n                event.returnValue = {\n                    gamePath: app.getPath('userData') + '/game',\n                    appPath: appPath,\n                    buildVersion: newBuildVersion,\n                    appVersion: newAppVersion\n                }\n            });\n        });\n\n    }\n\n    reloadSettings(): void {\n\n        this.gameWindows.forEach((gWindow) => {\n            //gWindow.shortCuts.reload();\n            gWindow.reloadSettings();\n        });\n\n    }\n\n    addWindow(): void {\n\n        // instance window game\n        let gWindow = new GameWindow(this);\n\n        // start the game window\n        gWindow.run();\n\n        // add event listenner closed\n        gWindow.closed((e) => {\n            delete this.gameWindows[this.gameWindows.indexOf(e)];\n        });\n\n        // add the game window\n        this.gameWindows.push(gWindow);\n    }\n}\n"]}