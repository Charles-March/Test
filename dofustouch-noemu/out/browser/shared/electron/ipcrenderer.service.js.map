{"version":3,"sources":["../src/browser/shared/electron/ipcrenderer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wCAAiD;AAEjD,MAAM,EAAE,WAAW,EAAE,GAAS,MAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAG9D,IAAa,kBAAkB,GAA/B;IAIC,YACe,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAJ3B,gBAAW,GAAG,WAAW,CAAC;QAC1B,YAAO,GAAG,CAAC,CAAC;IAMT,CAAC;IAEG,EAAE,CAAC,OAAc,EAAE,QAAa;QACtC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,IAAQ;YAEjD,4FAA4F;YAC5F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACV,CAAC;IAEM,IAAI,CAAC,OAAc,EAAE,GAAG,IAAgB;QAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,QAAQ,CAAC,OAAc,EAAE,GAAG,IAAgB;QAClD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;CACD,CAAA;AA3BY,kBAAkB;IAD9B,iBAAU,EAAE;qCAMS,aAAM;GALf,kBAAkB,CA2B9B;AA3BY,gDAAkB","file":"ipcrenderer.service.js","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\n\nconst { ipcRenderer } = (<any>global).nodeRequire('electron');\n\n@Injectable()\nexport class IpcRendererService {\n\tipcRenderer = ipcRenderer;\n\tcounter = 0;\n\n\tconstructor(\n        private zone: NgZone\n    ) {\n\n    }\n\n\tpublic on(message:string, callback: any) {\n\t\treturn this.ipcRenderer.on(message, (event: Event, args:any)=>{\n\n            // prevent that change is effectiv for zone.js because ipc run not under controll of zone.js\n            this.zone.run(() => {\n                callback(event, args);\n            });\n        });\n\t}\n\n\tpublic send(message:string, ...args: Array<any>) {\n\t\tthis.ipcRenderer.send(message, args);\n\t}\n\n\tpublic sendSync(message:string, ...args: Array<any>) {\n\t\treturn this.ipcRenderer.sendSync(message, args);\n\t}\n}\n"]}